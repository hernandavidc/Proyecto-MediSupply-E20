name: Deploy to GKE

on:
  push:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: medisupply-cluster
  GKE_REGION: us-central1
  REGISTRY: us-central1-docker.pkg.dev

jobs:
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Install GKE Auth Plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin
        echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

    - name: Configure Docker for Artifact Registry
      run: gcloud --quiet auth configure-docker us-central1-docker.pkg.dev

    - name: Get GKE credentials
      run: |
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

    - name: Build and push user-service image
      run: |
        # Build image
        docker build -t $REGISTRY/$PROJECT_ID/medisupply/user-service:$GITHUB_SHA ./user-service
        docker tag $REGISTRY/$PROJECT_ID/medisupply/user-service:$GITHUB_SHA $REGISTRY/$PROJECT_ID/medisupply/user-service:latest
        
        # Push image
        docker push $REGISTRY/$PROJECT_ID/medisupply/user-service:$GITHUB_SHA
        docker push $REGISTRY/$PROJECT_ID/medisupply/user-service:latest

    - name: Build and push supplier-service image
      run: |
        # Build image
        docker build -t $REGISTRY/$PROJECT_ID/medisupply/supplier-service:$GITHUB_SHA ./medisupply-supplier-service
        docker tag $REGISTRY/$PROJECT_ID/medisupply/supplier-service:$GITHUB_SHA $REGISTRY/$PROJECT_ID/medisupply/supplier-service:latest
        
        # Push image
        docker push $REGISTRY/$PROJECT_ID/medisupply/supplier-service:$GITHUB_SHA
        docker push $REGISTRY/$PROJECT_ID/medisupply/supplier-service:latest

    - name: Update Kubernetes manifests
      run: |
        # Replace PROJECT_ID and image tag in manifests
        sed -i "s/PROJECT_ID/$PROJECT_ID/g" k8s/services/user-service/user-service-deployment.yaml
        sed -i "s/:latest/:$GITHUB_SHA/g" k8s/services/user-service/user-service-deployment.yaml
        
        # Update supplier-service manifests
        sed -i "s/PROJECT_ID/$PROJECT_ID/g" k8s/services/supplier-service/supplier-service-deployment.yaml
        sed -i "s/:latest/:$GITHUB_SHA/g" k8s/services/supplier-service/supplier-service-deployment.yaml

    - name: Clean up before deploy
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
      run: |
        echo "🧹 Ejecutando limpieza pre-deploy..."
        ./scripts/cleanup-k8s.sh

    - name: Deploy to GKE
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
      run: |
        # Apply namespace
        kubectl apply -f k8s/namespace.yaml
        
        # Deploy database (fresh installation)
        kubectl apply -f k8s/database/
        
        # Wait for database to be ready
        kubectl wait --for=condition=Ready pod -l app=postgres -n medisupply --timeout=300s
        
        # Show postgres pod status and logs for debugging
        echo "=== PostgreSQL Pod Status ==="
        kubectl get pods -l app=postgres -n medisupply
        echo "=== PostgreSQL Logs (last 20 lines) ==="
        kubectl logs -l app=postgres -n medisupply --tail=20 || echo "No logs available yet"
        
        # Deploy user-service
        kubectl apply -f k8s/services/user-service/
        
        # Deploy supplier-service
        kubectl apply -f k8s/services/supplier-service/
        
        # Wait for deployments to complete
        kubectl rollout status deployment/user-service-deployment -n medisupply --timeout=600s
        kubectl rollout status deployment/supplier-service-deployment -n medisupply --timeout=600s
        
        # Deploy gateway (GKE Autopilot uses Gateway API instead of Ingress)
        kubectl apply -f k8s/gateway/

    - name: Verify deployment
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
      run: |
        kubectl get pods -n medisupply
        kubectl get services -n medisupply
        kubectl get gateway -n medisupply

    - name: Get Gateway IP
      id: get-ip
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
      run: |
        # Esperar hasta 8 minutos por la IP externa del Gateway
        echo "🔍 Esperando IP externa del Gateway..."
        for i in {1..48}; do
          IP=$(kubectl get gateway medisupply-gateway -n medisupply -o jsonpath='{.status.addresses[0].value}' 2>/dev/null || echo "")
          if [ ! -z "$IP" ]; then
            echo "ip=$IP" >> $GITHUB_OUTPUT
            echo "🎉 ¡IP externa obtenida: $IP!"
            echo "🌐 API disponible en: http://$IP"
            break
          fi
          echo "Esperando IP externa... (intento $i/48)"
          sleep 10
        done
        
        # Si no se obtuvo IP, mostrar mensaje informativo
        if [ -z "$IP" ]; then
          echo ""
          echo "⏳ NORMAL: Los Load Balancers de GCP pueden tardar 5-10 minutos en asignar IP externa."
          echo "🎯 El deploy SÍ funcionó correctamente. Solo falta la IP externa."
          echo ""
          echo "📋 Para obtener la IP cuando esté lista, ejecuta en Cloud Shell:"
          echo "   kubectl get gateway medisupply-gateway -n medisupply"
          echo ""
          echo "🔄 Para monitorear en tiempo real:"
          echo "   kubectl get gateway medisupply-gateway -n medisupply -w"
          echo ""
          echo "✅ La aplicación ya está funcionando internamente en el cluster."
        fi

    - name: Update deployment status
      if: steps.get-ip.outputs.ip != ''
      run: |
        echo "🚀 ¡Deploy exitoso!"
        echo "🌐 URL de la aplicación: http://${{ steps.get-ip.outputs.ip }}"
        echo "📚 Documentación User Service: http://${{ steps.get-ip.outputs.ip }}/docs"
        echo "📚 Documentación Supplier Service: http://${{ steps.get-ip.outputs.ip }}/supplier-docs"
        echo "❤️ Health check User Service: http://${{ steps.get-ip.outputs.ip }}/health"
        echo "❤️ Health check Supplier Service: http://${{ steps.get-ip.outputs.ip }}/healthz"
        echo "👥 API usuarios: http://${{ steps.get-ip.outputs.ip }}/api/v1/users"
        echo "🏥 API proveedores: http://${{ steps.get-ip.outputs.ip }}/api/v1/proveedores"
        echo "🏥 API productos: http://${{ steps.get-ip.outputs.ip }}/api/v1/productos"
        echo "🏥 API países: http://${{ steps.get-ip.outputs.ip }}/api/v1/paises"
        echo "🏥 API categorías: http://${{ steps.get-ip.outputs.ip }}/api/v1/categorias"
        echo "🏥 API certificaciones: http://${{ steps.get-ip.outputs.ip }}/api/v1/certificaciones"
        echo "🏥 API planes: http://${{ steps.get-ip.outputs.ip }}/api/v1/planes"
        echo "🏥 API vendedores: http://${{ steps.get-ip.outputs.ip }}/api/v1/vendedores"
