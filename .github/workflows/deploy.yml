name: Deploy to GKE

on:
  push:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: medisupply-cluster
  GKE_ZONE: us-central1-a
  REGISTRY: gcr.io

jobs:
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud --quiet auth configure-docker

    - name: Get GKE credentials
      run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

    - name: Build and push user-service image
      run: |
        # Build image
        docker build -t $REGISTRY/$PROJECT_ID/medisupply-user-service:$GITHUB_SHA ./user-service
        docker tag $REGISTRY/$PROJECT_ID/medisupply-user-service:$GITHUB_SHA $REGISTRY/$PROJECT_ID/medisupply-user-service:latest
        
        # Push image
        docker push $REGISTRY/$PROJECT_ID/medisupply-user-service:$GITHUB_SHA
        docker push $REGISTRY/$PROJECT_ID/medisupply-user-service:latest

    - name: Update Kubernetes manifests
      run: |
        # Replace PROJECT_ID in manifests
        sed -i "s/PROJECT_ID/$PROJECT_ID/g" k8s/services/user-service/user-service-deployment.yaml
        sed -i "s/:latest/:$GITHUB_SHA/g" k8s/services/user-service/user-service-deployment.yaml

    - name: Deploy to GKE
      run: |
        # Apply namespace
        kubectl apply -f k8s/namespace.yaml
        
        # Deploy database (if not exists)
        kubectl apply -f k8s/database/
        
        # Wait for database to be ready
        kubectl wait --for=condition=Ready pod -l app=postgres -n medisupply --timeout=300s || echo "Database already running"
        
        # Deploy user-service
        kubectl apply -f k8s/services/user-service/
        
        # Wait for deployment to complete
        kubectl rollout status deployment/user-service-deployment -n medisupply --timeout=600s
        
        # Deploy ingress
        kubectl apply -f k8s/ingress/

    - name: Verify deployment
      run: |
        kubectl get pods -n medisupply
        kubectl get services -n medisupply
        kubectl get ingress -n medisupply

    - name: Get Load Balancer IP
      id: get-ip
      run: |
        # Esperar hasta 5 minutos por la IP externa
        for i in {1..30}; do
          IP=$(kubectl get ingress medisupply-ingress -n medisupply -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ ! -z "$IP" ]; then
            echo "ip=$IP" >> $GITHUB_OUTPUT
            break
          fi
          echo "Esperando IP externa... (intento $i/30)"
          sleep 10
        done

    - name: Update deployment status
      if: steps.get-ip.outputs.ip != ''
      run: |
        echo "🚀 ¡Deploy exitoso!"
        echo "🌐 URL de la aplicación: http://${{ steps.get-ip.outputs.ip }}"
        echo "📚 Documentación: http://${{ steps.get-ip.outputs.ip }}/docs"
        echo "❤️ Health check: http://${{ steps.get-ip.outputs.ip }}/health"
