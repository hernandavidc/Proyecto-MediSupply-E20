name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-user-service:
    name: Test User Service
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        cd user-service
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        cd user-service
        python -m pytest tests/unit/ -v --tb=short --cov=app --cov-report=xml --cov-report=html

    - name: Run integration tests
      run: |
        cd user-service
        python -m pytest tests/integration/ -v --tb=short

    - name: Run smoke tests
      run: |
        cd user-service
        python -m pytest tests/e2e/ -v --tb=short -m "smoke"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./user-service/coverage.xml
        flags: user-service
        name: user-service-coverage

  test-supplier-service:
    name: Test Supplier Service
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        cd medisupply-supplier-service
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        cd medisupply-supplier-service
        python -m pytest tests/unit/ -v --tb=short --cov=app --cov-report=xml --cov-report=html

    - name: Run integration tests
      run: |
        cd medisupply-supplier-service
        python -m pytest tests/integration/ -v --tb=short

    - name: Run smoke tests
      run: |
        cd medisupply-supplier-service
        python -m pytest tests/e2e/ -v --tb=short -m "smoke"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./medisupply-supplier-service/coverage.xml
        flags: supplier-service
        name: supplier-service-coverage

  test-carga-masiva:
    name: Test Carga Masiva (Supplier Service)
    runs-on: ubuntu-latest
    needs: test-supplier-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        cd medisupply-supplier-service
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run carga masiva unit tests
      run: |
        cd medisupply-supplier-service
        python -m pytest tests/unit/test_carga_masiva.py -v --tb=short

    - name: Run carga masiva integration tests
      run: |
        cd medisupply-supplier-service
        python -m pytest tests/integration/test_integracion_carga_masiva.py -v --tb=short

    - name: Test CSV examples
      run: |
        cd medisupply-supplier-service
        echo "Testing CSV examples..."
        python -c "
        import csv
        import io
        
        # Test valid CSV format
        with open('ejemplo_carga_masiva.csv', 'r') as f:
            content = f.read()
            print('✅ Valid CSV format detected')
            
        # Test CSV structure
        reader = csv.DictReader(io.StringIO(content), delimiter='|')
        headers = reader.fieldnames
        expected_headers = [
            'sku', 'nombre_producto', 'proveedor_id', 'ficha_tecnica_url',
            'ca_temp', 'ca_humedad', 'ca_luz', 'ca_ventilacion', 'ca_seguridad', 'ca_envase',
            'org_tipo_medicamento', 'org_fecha_vencimiento',
            'valor_unitario_usd', 'certificaciones_sanitarias'
        ]
        
        if headers == expected_headers:
            print('✅ CSV headers match expected format')
        else:
            print('❌ CSV headers mismatch')
            print(f'Expected: {expected_headers}')
            print(f'Found: {headers}')
            exit(1)
        "

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Lint user-service
      run: |
        cd user-service
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint supplier-service
      run: |
        cd medisupply-supplier-service
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting
      run: |
        cd user-service
        black --check app/
        cd ../medisupply-supplier-service
        black --check app/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        cd user-service
        bandit -r app/ -f json -o bandit-report.json || true
        cd ../medisupply-supplier-service
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Check for known security vulnerabilities
      run: |
        cd user-service
        safety check --json --output safety-report.json || true
        cd ../medisupply-supplier-service
        safety check --json --output safety-report.json || true
